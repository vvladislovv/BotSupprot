import logging
from typing import Optional

logger = logging.getLogger(__name__)

class MarkdownV2Utils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Markdown V2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    @staticmethod
    def escape_markdown_v2(text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        result = text
        for char in special_chars:
            result = result.replace(char, f'\\{char}')
        
        return result
    
    @staticmethod
    def bold(text: str) -> str:
        """–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""
        escaped = MarkdownV2Utils.escape_markdown_v2(text)
        return f"*{escaped}*"
    
    @staticmethod
    def italic(text: str) -> str:
        """–ö—É—Ä—Å–∏–≤"""
        if not text:
            return ""
        escaped = MarkdownV2Utils.escape_markdown_v2(text)
        return f"_{escaped}_"
    
    @staticmethod
    def code(text: str) -> str:
        """–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥"""
        if not text:
            return ""
        # –ö–æ–¥ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        return f"`{text}`"
    
    @staticmethod
    def pre(text: str, language: str = "") -> str:
        """–ë–ª–æ–∫ –∫–æ–¥–∞"""
        if not text:
            return ""
        if language:
            return f"```{language}\n{text}\n```"
        else:
            return f"```\n{text}\n```"
    
    @staticmethod
    def link(text: str, url: str) -> str:
        """–°—Å—ã–ª–∫–∞"""
        if not text or not url:
            return text or ""
        escaped_text = MarkdownV2Utils.escape_markdown_v2(text)
        return f"[{escaped_text}]({url})"
    
    @staticmethod
    def strikethrough(text: str) -> str:
        """–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""
        escaped = MarkdownV2Utils.escape_markdown_v2(text)
        return f"~{escaped}~"
    
    @staticmethod
    def underline(text: str) -> str:
        """–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""
        escaped = MarkdownV2Utils.escape_markdown_v2(text)
        return f"__{escaped}__"
    
    @staticmethod
    def spoiler(text: str) -> str:
        """–°–ø–æ–π–ª–µ—Ä"""
        if not text:
            return ""
        escaped = MarkdownV2Utils.escape_markdown_v2(text)
        return f"||{escaped}||"
    
    @staticmethod
    def format_user_info(first_name: str, username: Optional[str] = None, bot_username: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_username: Username –±–æ—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        # –≠–º–æ–¥–∑–∏ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        result = f"üë§ {MarkdownV2Utils.escape_markdown_v2(first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
        
        if username:
            result += f" \\(@{MarkdownV2Utils.escape_markdown_v2(username)}\\)"
        
        if bot_username:
            result += f"\nü§ñ –ë–æ—Ç: @{MarkdownV2Utils.escape_markdown_v2(bot_username)}"
        
        return result
    
    @staticmethod
    def format_bot_info(bot_username: str, bot_id: int, is_active: bool = True) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Args:
            bot_username: Username –±–æ—Ç–∞
            bot_id: ID –±–æ—Ç–∞
            is_active: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        status_emoji = "üü¢" if is_active else "üî¥"
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if is_active else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        result = f"ü§ñ –ë–æ—Ç: @{MarkdownV2Utils.escape_markdown_v2(bot_username)}\n"
        result += f"üÜî ID: {MarkdownV2Utils.code(str(bot_id))}\n"
        result += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {MarkdownV2Utils.escape_markdown_v2(status_text)}"
        
        return result
    
    @staticmethod
    def format_group_info(group_title: str, group_id: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        
        Args:
            group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            group_id: ID –≥—Ä—É–ø–ø—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        result = f"üìã –ì—Ä—É–ø–ø–∞: {MarkdownV2Utils.escape_markdown_v2(group_title)}\n"
        result += f"üÜî ID: {MarkdownV2Utils.code(str(group_id))}"
        
        return result
    
    @staticmethod
    def format_error_message(error: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        return f"‚ùå {MarkdownV2Utils.bold('–û—à–∏–±–∫–∞')}: {MarkdownV2Utils.escape_markdown_v2(str(error))}"
    
    @staticmethod
    def format_success_message(message: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        return f"‚úÖ {MarkdownV2Utils.escape_markdown_v2(message)}"
    
    @staticmethod
    def format_warning_message(message: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        return f"‚ö†Ô∏è {MarkdownV2Utils.escape_markdown_v2(message)}"
    
    @staticmethod
    def format_info_message(message: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        return f"‚ÑπÔ∏è {MarkdownV2Utils.escape_markdown_v2(message)}"
    
    @staticmethod
    def format_command_help() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        help_text = f"""üîß {MarkdownV2Utils.bold('–ö–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')}:

üü° {MarkdownV2Utils.code('/hold')} \\- –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
üü¢ {MarkdownV2Utils.code('/unhold')} \\- —Å–Ω—è—Ç—å —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è
üîí {MarkdownV2Utils.code('/ban')} \\- –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üîì {MarkdownV2Utils.code('/unban')} \\- —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ùå {MarkdownV2Utils.code('/end')} \\- –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
‚ùì {MarkdownV2Utils.code('/help')} \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ\\."""
        
        return help_text
    
    @staticmethod
    def format_status_message(status: str, chat_id: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        
        Args:
            status: –°—Ç–∞—Ç—É—Å
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        status_emojis = {
            'waiting': '‚è≥',
            'answered': '‚úÖ',
            'hold': 'üü°',
            'banned': 'üîí',
            'ended': '‚ùå'
        }
        
        status_names = {
            'waiting': '–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
            'answered': '–æ—Ç–≤–µ—á–µ–Ω',
            'hold': '–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏',
            'banned': '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            'ended': '–∑–∞–≤–µ—Ä—à–µ–Ω'
        }
        
        emoji = status_emojis.get(status, '‚ùì')
        name = status_names.get(status, status)
        
        return f"{emoji} –°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ {MarkdownV2Utils.code(str(chat_id))}: {MarkdownV2Utils.escape_markdown_v2(name)}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def escape_md(text: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown V2"""
    return MarkdownV2Utils.escape_markdown_v2(text)

def bold(text: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    return MarkdownV2Utils.bold(text)

def italic(text: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∏–≤–∞"""
    return MarkdownV2Utils.italic(text)

def code(text: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞"""
    return MarkdownV2Utils.code(text)

def link(text: str, url: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    return MarkdownV2Utils.link(text, url)