import logging
from aiogram.types import Message, MessageEntity, BufferedInputFile
from aiogram import Bot
from database.database import async_session
from database.queries import DatabaseQueries
from utils.topic_manager import TopicManager
from config import config
import io

logger = logging.getLogger(__name__)

class MessageHandler:
    @staticmethod
    async def send_to_main_bot(message: Message, chat_data, main_bot: Bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É –±–æ—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ chat_data
            bot_data = chat_data.bot
            
            if not bot_data.group_id:
                logger.warning(f"–ë–æ—Ç {bot_data.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ")
                return
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            topic_id = await TopicManager.ensure_topic_exists(main_bot, chat_data, bot_data.group_id)
            if not topic_id:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ —Ç–µ–º—É –¥–ª—è —á–∞—Ç–∞ {chat_data.id}")
                return
            
            chat_data.topic_id = topic_id
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            from utils.markdown_utils import escape_md
            user_info = f"üë§ {escape_md(chat_data.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
            if chat_data.username:
                user_info += f" \\(@{escape_md(chat_data.username)}\\)"
            user_info += f"\nü§ñ –ë–æ—Ç: @{escape_md(bot_data.bot_username)}"
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message.text:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                from aiogram.enums import ParseMode
                
                await main_bot.send_message(
                    chat_id=bot_data.group_id,
                    text=user_info,
                    message_thread_id=chat_data.topic_id,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                from utils.text_formatter import TextFormatter
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entities –≤ Markdown V2 —Ñ–æ—Ä–º–∞—Ç
                formatted_text = TextFormatter.format_text_with_entities(
                    message.text,
                    [entity.model_dump() for entity in (message.entities or [])]
                )
                
                await main_bot.send_message(
                    chat_id=bot_data.group_id,
                    text=formatted_text,
                    message_thread_id=chat_data.topic_id,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                # –î–ª—è –º–µ–¥–∏–∞ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                from aiogram.enums import ParseMode
                
                await main_bot.send_message(
                    chat_id=bot_data.group_id,
                    text=user_info,
                    message_thread_id=chat_data.topic_id,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                await MessageHandler._forward_media_message(
                    source_message=message,
                    target_bot=main_bot,
                    target_chat_id=bot_data.group_id,
                    message_thread_id=chat_data.topic_id
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with async_session() as session:
                db = DatabaseQueries(session)
                await db.create_message(
                    chat_id=chat_data.id,
                    message_id=message.message_id,
                    from_user=True,
                    content=message.text or message.caption,
                    message_type=MessageHandler.get_message_type(message)
                )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {MessageHandler.get_message_type(message)} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–º—É –±–æ—Ç—É: {e}")

    @staticmethod
    async def _forward_media_message(source_message: Message, target_bot: Bot, target_chat_id: int, message_thread_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if source_message.photo:
                # –§–æ—Ç–æ
                file_info = await source_message.bot.get_file(source_message.photo[-1].file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_photo(
                    chat_id=target_chat_id,
                    photo=BufferedInputFile(file_bytes.read(), filename="photo.jpg"),
                    caption=source_message.caption,
                    caption_entities=source_message.caption_entities,
                    message_thread_id=message_thread_id
                )
            elif source_message.video:
                # –í–∏–¥–µ–æ
                file_info = await source_message.bot.get_file(source_message.video.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_video(
                    chat_id=target_chat_id,
                    video=BufferedInputFile(file_bytes.read(), filename="video.mp4"),
                    caption=source_message.caption,
                    caption_entities=source_message.caption_entities,
                    message_thread_id=message_thread_id,
                    duration=source_message.video.duration,
                    width=source_message.video.width,
                    height=source_message.video.height
                )
            elif source_message.document:
                # –î–æ–∫—É–º–µ–Ω—Ç
                file_info = await source_message.bot.get_file(source_message.document.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                filename = source_message.document.file_name or "document"
                await target_bot.send_document(
                    chat_id=target_chat_id,
                    document=BufferedInputFile(file_bytes.read(), filename=filename),
                    caption=source_message.caption,
                    caption_entities=source_message.caption_entities,
                    message_thread_id=message_thread_id
                )
            elif source_message.voice:
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                file_info = await source_message.bot.get_file(source_message.voice.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_voice(
                    chat_id=target_chat_id,
                    voice=BufferedInputFile(file_bytes.read(), filename="voice.ogg"),
                    message_thread_id=message_thread_id,
                    duration=source_message.voice.duration
                )
            elif source_message.video_note:
                # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (–∫—Ä—É–∂–æ—á–µ–∫)
                file_info = await source_message.bot.get_file(source_message.video_note.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_video_note(
                    chat_id=target_chat_id,
                    video_note=BufferedInputFile(file_bytes.read(), filename="video_note.mp4"),
                    message_thread_id=message_thread_id,
                    duration=source_message.video_note.duration,
                    length=source_message.video_note.length
                )
            elif source_message.sticker:
                # –°—Ç–∏–∫–µ—Ä
                file_info = await source_message.bot.get_file(source_message.sticker.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_sticker(
                    chat_id=target_chat_id,
                    sticker=BufferedInputFile(file_bytes.read(), filename="sticker.webp"),
                    message_thread_id=message_thread_id
                )
            elif source_message.animation:
                # GIF –∞–Ω–∏–º–∞—Ü–∏—è
                file_info = await source_message.bot.get_file(source_message.animation.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_animation(
                    chat_id=target_chat_id,
                    animation=BufferedInputFile(file_bytes.read(), filename="animation.gif"),
                    caption=source_message.caption,
                    caption_entities=source_message.caption_entities,
                    message_thread_id=message_thread_id,
                    duration=source_message.animation.duration,
                    width=source_message.animation.width,
                    height=source_message.animation.height
                )
            elif source_message.audio:
                # –ê—É–¥–∏–æ
                file_info = await source_message.bot.get_file(source_message.audio.file_id)
                file_bytes = await source_message.bot.download_file(file_info.file_path)
                
                await target_bot.send_audio(
                    chat_id=target_chat_id,
                    audio=BufferedInputFile(file_bytes.read(), filename="audio.mp3"),
                    caption=source_message.caption,
                    caption_entities=source_message.caption_entities,
                    message_thread_id=message_thread_id,
                    duration=source_message.audio.duration,
                    performer=source_message.audio.performer,
                    title=source_message.audio.title
                )
            elif source_message.location:
                # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
                await target_bot.send_location(
                    chat_id=target_chat_id,
                    latitude=source_message.location.latitude,
                    longitude=source_message.location.longitude,
                    message_thread_id=message_thread_id,
                    live_period=source_message.location.live_period,
                    heading=source_message.location.heading,
                    proximity_alert_radius=source_message.location.proximity_alert_radius
                )
            elif source_message.contact:
                # –ö–æ–Ω—Ç–∞–∫—Ç
                await target_bot.send_contact(
                    chat_id=target_chat_id,
                    phone_number=source_message.contact.phone_number,
                    first_name=source_message.contact.first_name,
                    last_name=source_message.contact.last_name,
                    vcard=source_message.contact.vcard,
                    message_thread_id=message_thread_id
                )
            elif source_message.venue:
                # –ú–µ—Å—Ç–æ
                await target_bot.send_venue(
                    chat_id=target_chat_id,
                    latitude=source_message.venue.location.latitude,
                    longitude=source_message.venue.location.longitude,
                    title=source_message.venue.title,
                    address=source_message.venue.address,
                    foursquare_id=source_message.venue.foursquare_id,
                    foursquare_type=source_message.venue.foursquare_type,
                    message_thread_id=message_thread_id
                )
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from utils.markdown_utils import escape_md
                from aiogram.enums import ParseMode
                
                await target_bot.send_message(
                    chat_id=target_chat_id,
                    text=f"üìé –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {escape_md(MessageHandler.get_message_type(source_message))}",
                    message_thread_id=message_thread_id,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞: {e}")

    @staticmethod
    async def forward_to_user(message: Message, chat_data, user_bot: Bot):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not MessageHandler._has_content(message):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
                return
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if message.text:
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Markdown V2
                from utils.text_formatter import TextFormatter
                from aiogram.enums import ParseMode
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entities –≤ Markdown V2 —Ñ–æ—Ä–º–∞—Ç
                formatted_text = TextFormatter.format_text_with_entities(
                    message.text,
                    [entity.model_dump() for entity in (message.entities or [])]
                )
                
                await user_bot.send_message(
                    chat_id=chat_data.user_id,
                    text=formatted_text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                # –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                await MessageHandler._forward_media_message(
                    source_message=message,
                    target_bot=user_bot,
                    target_chat_id=chat_data.user_id,
                    message_thread_id=None
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with async_session() as session:
                db = DatabaseQueries(session)
                await db.create_message(
                    chat_id=chat_data.id,
                    message_id=message.message_id,
                    from_user=False,
                    content=message.text or message.caption,
                    message_type=MessageHandler.get_message_type(message)
                )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {MessageHandler.get_message_type(message)} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_data.user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            logger.error(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {getattr(message, 'content_type', 'unknown')}")
            logger.error(f"Chat ID: {chat_data.user_id}")
            logger.error(f"Message ID: {message.message_id}")

    @staticmethod
    def get_message_type(message: Message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.text:
            return 'text'
        elif message.photo:
            return 'photo'
        elif message.video:
            return 'video'
        elif message.document:
            return 'document'
        elif message.voice:
            return 'voice'
        elif message.video_note:
            return 'video_note'
        elif message.sticker:
            return 'sticker'
        elif message.animation:
            return 'animation'
        elif message.audio:
            return 'audio'
        elif message.location:
            return 'location'
        elif message.contact:
            return 'contact'
        elif message.poll:
            return 'poll'
        elif message.venue:
            return 'venue'
        else:
            return 'other'

    @staticmethod
    def get_topic_name(chat_data) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–º—ã"""
        # –ò–º–µ–Ω–∞ —Ç–µ–º –Ω–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Markdown
        name = chat_data.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if chat_data.username:
            name += f" (@{chat_data.username})"
        
        emoji = config.STATUS_EMOJIS.get(chat_data.status, '‚è≥')
        return f"{emoji} {name}"

    @staticmethod
    async def update_topic_name(chat_data, group_bot: Bot, group_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–º—ã"""
        await TopicManager.update_topic_name(group_bot, chat_data, group_id)

    @staticmethod
    def _has_content(message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–Ω—Ç–µ–Ω—Ç"""
        return any([
            message.text,
            message.photo,
            message.video,
            message.document,
            message.voice,
            message.video_note,
            message.sticker,
            message.animation,
            message.audio,
            message.location,
            message.contact,
            message.poll,
            message.venue,
            message.caption
        ])