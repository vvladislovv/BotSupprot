import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums.content_type import ContentType
from aiogram.enums import ParseMode

from database.database import async_session
from database.queries import DatabaseQueries

from utils.message_handler import MessageHandler
from utils.status_manager import StatusManager
from utils.bot_manager import bot_manager
from utils.markdown_utils import MarkdownV2Utils, escape_md, bold, code
from config import config

logger = logging.getLogger(__name__)
router = Router()



@router.message(Command("help"))
async def help_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    help_text = MarkdownV2Utils.format_command_help()
    
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Command("hold"))
async def hold_chat(message: Message):
    """–ü–æ–º–µ—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∫–∞–∫ '–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏'"""

    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        async with async_session() as session:
            db = DatabaseQueries(session)
            
            logger.info(f"Attempting to set hold status for thread {message.message_thread_id}")
            

            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                await message.reply(MarkdownV2Utils.format_error_message("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            if chat_data.status == config.STATUS_HOLD:
                await message.reply(MarkdownV2Utils.format_info_message("–î–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            if chat_data.status in [config.STATUS_ENDED, config.STATUS_BANNED]:
                await message.reply(MarkdownV2Utils.format_error_message("–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await StatusManager.update_status(chat_data.id, config.STATUS_HOLD, main_bot)
            
            await message.reply(f"üü° –î–∏–∞–ª–æ–≥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ {bold('–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏')}", parse_mode=ParseMode.MARKDOWN_V2)
            
    except Exception as e:
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Command("ban"))
async def ban_user(message: Message):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        async with async_session() as session:
            db = DatabaseQueries(session)
            

            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                await message.reply(MarkdownV2Utils.format_error_message("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            is_banned = await db.is_user_banned(chat_data.bot_id, chat_data.user_id)
            if is_banned:
                await message.reply(MarkdownV2Utils.format_info_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            if chat_data.status == config.STATUS_BANNED:
                await message.reply(MarkdownV2Utils.format_info_message("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await db.ban_user(chat_data.bot_id, chat_data.user_id)
            

            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await StatusManager.update_status(chat_data.id, config.STATUS_BANNED, main_bot)
            
            await message.reply(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {code(str(chat_data.user_id))} {bold('–∑–∞–±–∞–Ω–µ–Ω')}", parse_mode=ParseMode.MARKDOWN_V2)
            
    except Exception as e:
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Command("unhold"))
async def unhold_chat(message: Message):
    """–°–Ω—è—Ç—å –¥–∏–∞–ª–æ–≥ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è"""

    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        async with async_session() as session:
            db = DatabaseQueries(session)
            
            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                await message.reply(MarkdownV2Utils.format_error_message("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            if chat_data.status != config.STATUS_HOLD:
                await message.reply(MarkdownV2Utils.format_info_message("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            await StatusManager.update_status(chat_data.id, config.STATUS_WAITING, main_bot)
            
            await message.reply(f"üü¢ –î–∏–∞–ª–æ–≥ {bold('—Å–Ω—è—Ç —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è')}", parse_mode=ParseMode.MARKDOWN_V2)
            
    except Exception as e:
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Command("unban"))
async def unban_user(message: Message):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ–º–µ
    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        async with async_session() as session:
            db = DatabaseQueries(session)
            

            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                await message.reply(MarkdownV2Utils.format_error_message("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            is_banned = await db.is_user_banned(chat_data.bot_id, chat_data.user_id)
            if not is_banned:
                await message.reply(MarkdownV2Utils.format_info_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await db.unban_user(chat_data.bot_id, chat_data.user_id)
            

            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await StatusManager.update_status(chat_data.id, config.STATUS_WAITING, main_bot)
            
            await message.reply(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {code(str(chat_data.user_id))} {bold('—Ä–∞–∑–±–∞–Ω–µ–Ω')}", parse_mode=ParseMode.MARKDOWN_V2)
            
    except Exception as e:
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Command("end"))
async def end_chat(message: Message):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"""

    if not message.message_thread_id:
        await message.reply(MarkdownV2Utils.format_error_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞"), parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        async with async_session() as session:
            db = DatabaseQueries(session)
            

            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                await message.reply(MarkdownV2Utils.format_error_message("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            

            await StatusManager.update_status(chat_data.id, config.STATUS_ENDED, main_bot)
            
            await message.reply(f"‚ùå –î–∏–∞–ª–æ–≥ {bold('–∑–∞–≤–µ—Ä—à–µ–Ω')}", parse_mode=ParseMode.MARKDOWN_V2)
            
    except Exception as e:
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.message_thread_id)
async def operator_reply(message: Message):
    """–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.text and message.text.startswith('/')) or message.content_type == ContentType.FORUM_TOPIC_EDITED:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not any([
        message.text, message.photo, message.video, message.document,
        message.voice, message.video_note, message.sticker, message.animation,
        message.audio, message.location, message.contact, message.poll, message.venue
    ]):
        return
    
    try:
        from utils.media_group_handler import media_group_handler
        
        async with async_session() as session:
            db = DatabaseQueries(session)

            chat_data = await db.get_chat_by_topic(message.message_thread_id)
            if not chat_data:
                logger.warning(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ–º—ã {message.message_thread_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
            if chat_data.status in [config.STATUS_ENDED, config.STATUS_BANNED]:
                await message.reply(MarkdownV2Utils.format_info_message("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            main_bot = await bot_manager.get_bot(0)
            if not main_bot:
                await message.reply(MarkdownV2Utils.format_error_message("–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"), parse_mode=ParseMode.MARKDOWN_V2)
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await media_group_handler.handle_message(message, chat_data, main_bot, is_from_user=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏
            if chat_data.status != config.STATUS_HOLD:
                await StatusManager.update_status(chat_data.id, config.STATUS_ANSWERED, main_bot)
                logger.info(f"–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ {chat_data.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ANSWERED")
            elif chat_data.status == config.STATUS_HOLD:
                logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å HOLD –¥–ª—è —á–∞—Ç–∞ {chat_data.id} –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–º—ã {message.message_thread_id}: {str(e)}", exc_info=True)
        await message.reply(MarkdownV2Utils.format_error_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"), parse_mode=ParseMode.MARKDOWN_V2)